---
title: "Regression Overview"
subtitle: "Week 2"
date: 2025-01-16
format: 
  html:
    embed-resources: true
toc: true
---

# Review of the Previous Session

Let's refresh what we did last week. 

::: callout-note
## Exercise

First, load the `tidyverse` library

```{r}
#| message: false

library(tidyverse)
```

Then, load the V-Dem data

```{r}
#| eval: false

load(url("https://github.com/vdeminstitute/vdemdata/raw/6bee8e170578fe8ccdc1414ae239c5e870996bc0/data/vdem.RData"))
```


You are interested in corruption in various geographical regions. Select year (`year`), region (`e_regionpol_7C`) and corruption (`v2x_corr`) variables from the `vdem` dataset.

```{r}
#| eval: false

corruption_data = ... %>%
  ...(year, ..., v2x_corr) 
```


As we are working with the V-Dem data, let's rename variables so it's more straightforward.

```{r}
#| eval: false

corruption_data = corruption_data ...
  ...(region = e_regionpol_7C,
      corruption = ...)
```

Calculate the average of the `corruption` variable. Don't forget about the `na.rm = TURE` argument!

```{r}
#| eval: false

...
```

Using `group_by()` and `summarize()` calculate the average corruption for all regions in the dataset.

```{r}
#| eval: false

corruption_data ...
  (...) %>%
  ...(average = ...(..., na.rm = T))
```

Lastly, let's see the distributions of corruption across regions. Draw a boxplot below with `region` variable on the X axis, and `corruption` variable on the Y axis.

```{r}
#| eval: false

ggplot(data = corruption_data) +
  ...(aes(x = ..., y = ...))
```

Something is wrong, right? We haven't checked the classes of the variables, and apparently the `region` variable has to be changed. Let's check it's class first.

```{r}
#| eval: false

...(corruption_data$...)
```

What class should it be? Let's recode it directly on the plot.

```{r}
#| eval: false

...(...) +
  geom_boxplot(aes(x = ...(region), y = ...))
```

:::

# Agenda for Today

-   Clearing the environment

-   Loading CSV data to R

-   Building a simple OLS regression

-   Interpreting the regression

<center>
<a href="https://artur-baranov.github.io/nu-ps405-ds/scripts/..." class="btn btn-primary" role="button" download="..." style="width:200px" target="_blank">Download script</a>
</center>

<br>

<center>
<a href="https://artur-baranov.github.io/nu-ps405-ds/data/WHR.csv" class="btn btn-primary" role="button" download="WHR.csv" style="width:200px" target="_blank">Download data</a>
</center>


# Simple Linear Regression

First of all, don't forget to download the data! Today we are working with the World Happiness Report. For loading the dataset in R, `getwd()` and `setwd()` can be helpful. The [codebook](https://happiness-report.s3.amazonaws.com/2024/Ch2+Appendix.pdf) is here to help us.

-   `Country_name` is the name of the country

-   `Ladder_score` is the happiness score

-   `Logged_GDP_per_capita` is the log of GDP per capita

-   `Social_support` is an index that measures the extent to which an individual has someone to rely on in times of trouble.

-   `Healthy_life_expectancy` is the expected age of healthy living.

And many others.

```{r}
whr = read.csv("data/WHR.csv")
```

Explore what we have in the dataset by accessing the column names

```{r}
colnames(whr)
```
First, let's draw a histogram for `Ladder_score` variable.

```{r}
#| message: false

ggplot(whr) +
  geom_histogram(aes(x = Ladder_score)) +
  labs(x = "Happiness Score") +
  scale_y_continuous(breaks = c(0:10)) +
  theme_classic()
```

Now, let's plot happiness scores (`Ladder_score`) against `Social_support`. What can we see?

```{r}
ggplot(whr) +
  geom_point(aes(x = Social_support, y = Ladder_score))
```

Let's load the `estimatr` library for the `lm_robust()` function, and then run the model. 

```{r}
library(estimatr)
basic_model = lm_robust(Ladder_score ~ Social_support, whr)
  
summary(basic_model)
```

A one unit increase in Social Support is associated with a 7.4 increase in the happiness score. What is the maximum value the Happiness Score can take?

```{r}
max(whr$Ladder_score)
```

So, how much does this model tell us?

Let's correct the `Social_support` variable a bit, transforming it to 0-100 scale. What do you think about the model now? What do you think about $R^2$?

```{r}
whr = whr %>%
  mutate(Social_support_percentage = Social_support * 100)

adjusted_model = lm_robust(Ladder_score ~ Social_support_percentage, whr)
  
summary(adjusted_model)
```

Let's write this regression formula out. Do you remember the general form?

$$
Y = \beta_0 + \beta_1x_1+\epsilon
$$
In our case, this can be presented as

$$
\text{Happines} = -0.34 + 0.07\text{ Social Support} + e \\
Y = -0.34+0.07X+u
$$


Now, visualize the regression.

```{r}
ggplot(whr, aes(x = Social_support_percentage, y = Ladder_score)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Social Support (%)",
       y = "Happiness Score")
```





Healthy lifestyle for mutation exercise

interpretation



Bias-Variance Tradeoff

set.seed for sampling

R^2


Election turnout (A) (v2eltrnout)
Legislative constraints on the executive index (D) (v2xlg_legcon)

Are the capacities of the legislature associated with electoral turnout? Is there an association between legislative constraints on the executive and electoral turnout? 

```{r}
#| eval: false
legislative_data = vdem %>% 
  select(country_name, year, v2xlg_legcon, v2eltrnout, e_v2x_polyarchy_5C) %>%
  rename(legislative_constraints = v2xlg_legcon,
         turnout = v2eltrnout,
         regime = e_v2x_polyarchy_5C) %>%
  filter(year > 2020 & regime >= 0.5) 

legislative_data %>%
  ggplot(aes(x = legislative_constraints, y = turnout)) +
  geom_point() +
  geom_smooth(method = "lm")

lm(turnout ~ legislative_constraints, legislative_data) %>%
  summary()

library(estimatr)

```



# Check List

<input type="checkbox"/> I know that wrong class of a variable can hinder statistical models and vizualizaitons


