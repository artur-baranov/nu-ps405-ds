---
title: "Presenting Results of Regression"
subtitle: "Week 5"
date: 2025-02-06
format: 
  html:
    embed-resources: true
toc: true
---

# Review of the previous week

::: callout-note
## Review

Start with loading the `tidyverse` library and the Who Governs data.

```{r}
#| message: false
library(tidyverse)

whogov = read.csv("data/WhoGov.csv")
```

Calculate confidence intervals of `n_total` for each `system_category`.

Visualize the calculated confidence intervals.

ggeffects

:::

# Review of the homework

The `ggeffects` library is incredibly helpful! And quite simple. You can use it for plotting the categorical data. One thing to note, make sure it's a `factor()`! Check it out below.

```{r}
#| warning: false

library(ggeffects)

int = lm(alertness ~ coffee * time, data = coffee_data)

ggpredict(int, terms = c("time", "coffee")) %>%
  plot(connect_lines = TRUE) 
```

# Agenda





# Devtools in R

Sometimes, it is helpful to utilize versions of packages that are under development. Those are impossible to install directly, but you can download them frob GitHub. To simplify this process, you need special package called `devtools`.

```{r}
#| eval: false

install.packages("devtools")
```

Now, install the `vdemdata` library. This way we'll be able to load the most current V-Dem dataset directly to the R.

```{r}
#| eval: false

devtools::install_github("vdeminstitute/vdemdata")
```

Let's test it. We see the dataset is here! But for the future, this is the way to install packages that are not released yet.

```{r}
library(vdemdata)
vdem %>%
  select(country_name, year, histname, v2x_polyarchy) %>%
  head()
```


# Merging Datasets and Exploring the Data

We are working with [SIPRI Arms Transfers Database](https://www.sipri.org/databases/armstransfers). It contains information on all transfers of major conventional arms. 

-   `Recipient` of arms

-   `Year`

-   `Import` of arms

-   `Regime` a V-Dem variable for political regime

```{r}
sipri = read.csv("data/sipri.csv")
```

Now, subset some variables from V-Dem. We are choosing the following variables:

-   `country_name`

-   `year`

-   `e_gdp` GDP of a country

-   `e_miinteco` Armed conflict, international

-   `e_miinterc` Armed conflict, internal 

```{r}
vdem_variables = vdem %>%
  select(country_name, year, e_gdp, e_miinteco, e_miinterc)
```

Note the syntax below. We are joining two dataframes by two variables: `Recipient` and `Year`, but in the V-Dem data those have different name or spelling. 

```{r}
sipri_vdem = sipri %>%
  left_join(vdem_variables, by = c("Recipient" = "country_name", 
                                   "Year" = "year"))

head(sipri_vdem)
```

For our convenience, rename the variables in the newly created dataframe.

```{r}
sipri_vdem = sipri_vdem %>%
  rename(GDP = e_gdp,
         International_conflict = e_miinteco,
         Internal_conflict = e_miinterc)

head(sipri_vdem)
```

Explore the `GDP` variable. Does it need a transformation?

```{r}
#| warning: false

ggplot(sipri_vdem) +
  geom_histogram(aes(x = GDP))
```

It might be the case. But to double-check our assumption, let's draw a boxplot. Take the `log()` of GDP directly in the plot. Did it get better?

```{r}
ggplot(sipri_vdem) +
  geom_boxplot(aes(y = GDP))
```

Therefore, let's create a new variable `Log_GDP`.

```{r}
sipri_vdem = sipri_vdem %>%
  mutate(Log_GDP = log(GDP))
```

To explore multiple variables at once, it is useful to plot them in `pairs` plot. There's a library `GGally` which is based on `ggplot2`, and it's quite straightforward. Be careful with the wrong class identification! Can you notice anything?

```{r}
#| warning: false
#| message: false

library(GGally)

sipri_vdem %>%
  ggpairs(columns = c("Import", "Regime", "Log_GDP", "International_conflict", "Internal_conflict"))
```


# Model Building 

Let's set up a basic model. We are interested in explaining the `Import` of arms. Is it related to the economic capacity of the state? We can use proxy `Log_GDP`.

```{r}
model_basic = lm(Import ~ Log_GDP, sipri_vdem)
summary(model_basic)
```

```{r}
model_fe = lm(Import ~ Log_GDP + Regime + International_conflict, sipri_vdem)
summary(model_fe)

ggpredict(model_fe, terms = c("Log_GDP", "International_conflict", "Regime")) %>%
  plot()
```


```{r}
library(ggeffects)
model_int = lm(Import ~ Log_GDP + Regime * International_conflict, sipri_vdem)
summary(model_int)

ggpredict(model_int, terms = c("Log_GDP", "International_conflict", "Regime")) %>%
  plot() 
```


Present the model


LaTeX: write out the formula


Report the results, tables

Report the results, CI effects

Report the results, plot

Report the results, simulations


Why voters who value democracy participate in democratic backsliding
State Control and the Effects of Foreign Relations on Bilateral Trade


# Exercises

practice joins
