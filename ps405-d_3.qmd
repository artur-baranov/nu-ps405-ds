---
title: "Multiple Linear Regression"
subtitle: "Week 3"
date: 2025-01-23
format: 
  html:
    embed-resources: true
toc: true
---

# Before we start

-   Congrats with submitting the first HW! How are you feeling?

-   The discussion section structure (review, new material and exercises). I would be happy to hear your feedback after the classes or via email.

<center>
<a href="https://artur-baranov.github.io/nu-ps405-ds/scripts/ps405-d_2.qmd" class="btn btn-primary" role="button" download="ps405-d_2.qmd" style="width:200px" target="_blank">Download script</a>
</center>
<br>
<center>
<a href="https://artur-baranov.github.io/nu-ps405-ds/data/WHR.csv" class="btn btn-primary" role="button" download="WHR.csv" style="width:200px" target="_blank">Download data</a>
</center>


# Review of the previous week

::: callout-note
## Review

Load the `tidyverse` and `modelsummary` libraries

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(modelsummary)
```

Load the World Happiness Report data (`whr.csv`)

```{r}
whr = read.csv("data/WHR.csv")
```

Using `ggplot()`, draw a histogram of `Logged_GDP_per_capita` variable



Add a `geom_vline()` to indicate an average



Build a linear model, where Happiness Score (`Ladder_score`) is a dependent variable, and `Logged_GDP_per_capita` is independent variable



Create a scatterplot using `ggplot()` and `geom_point()`, with `Logged_GDP_per_capita` on the X-axis and `Ladder_score` on the Y-axis



Add a linear regression line to the plot (`geom_smooth()`). Don't forget to give it a title and label the axes.



Present the data

```{r}
#| eval: false

modelsummary(list("Model" = ...elt()),
             ...length() = c("Intercept", 
                             "GDP per capita (log)"),
             ... = "BIC|AIC|RMSE|Log.Lik.",    
             stars = TRUE) 
```


:::

# Agenda for Today




# Dummy Variables

Quite often we deal with binary or dummy variables in statistics. Those can take the following shape:

```{r}
data.frame(
  Percentage = c(35, 32, 21, 12),
  Green_Party = c(1, 0, 0, 0),
  Socialist_Party = c(0, 1, 0, 0),
  Conservative_Party = c(0, 0, 1, 0)
)
```

However, more frequently, we work with representations like the one shown below:

```{r}
data.frame(
  Percentage = c(35, 32, 21, 12),
  Parties = c("Green Party", "Socialist Party", "Conservative Party", "Other Parties")
)
```


What is the class of such data in R?

Today we are working with WhoGov dataset. As usual, I recomment taking a look at their [codebook](https://politicscentre.nuffield.ox.ac.uk/media/4117/whogov_codebook.pdf).

```{r}
whogov = read.csv("data/WhoGov.csv")
```

First of all, these are the following variables we are going to work with today:

-   `country_name` is a country name

-   `n_individuals` number of unique persons in the cabinet

-   `leaderexperience_continuous` the number of years the person has been leader of the country in total.

-   `leader_party` party of the leader

-   `system_category` the regime type

Start with exploring the distribution of number of unique persons in the cabinet (`n_individuals`)

```{r}
#| message: false

ggplot(whogov) +
  geom_histogram(aes(x = n_individuals)) 
```

Present the descriptive statistics of `n_individuals` variable.

```{r}
#| eval: false

...
```


Let's explore whether a leader of a country being independent from a party leads to more or fewer people in their cabinet. First, let's create a dummy variable indicating if a leader is independent or non-independent. You can use 1 or 0 instead, but to make it more readable we stick to more transparent labels.

```{r}
whogov = whogov %>%
  mutate(indep = ifelse(leader_party == "independent", "Independent", "Non-independent"))
```

Now, build a simple model and explore the effect.

```{r}
lm(n_individuals ~ indep, whogov) %>%
  summary()
```

What if we want to relevel the `indep` variable to know the effect relative to Non-independent leader?

```{r}
#| eval: false

whogov$indep = relevel(whogov$indep, ref = "Non-independent")
```

Oops! This is why classes of data are important. Fix it!

```{r}
whogov$indep = as.factor(whogov$indep)
```

Now we can relevel the variable

```{r}
whogov$indep = relevel(whogov$indep, ref = "Non-independent")
```

Compare the models. Does the result sound reasonable? Pretty much. This is simply an inverse. But things get way more interesting if categorical variable has more than 2 levels. You will see this later on. For now, let's interpret the result.

```{r}
lm(n_individuals ~ indep, whogov) %>%
  summary()
```


## Fixed Effects

Let's explore how leader's tenure is associated with the number of individuals in the government. We start with the simple linear regression. Take a moment to interpret the result and $R^2$.

```{r}
lm(n_individuals ~ leaderexperience_continuous, whogov) %>%
  summary()
```

Take a moment and draw a scatterplot for `n_individuals` and `leaderexperience_continuous`. Add a regression line to the plot.

```{r}
#| eval: false

...
```

Now, let's add a categorical variable, `indep`, to the model. By doing so, we assume that the association between the leader's tenure and the number of individuals in the government differs depending on whether the leader is independent or partisan. 

Practically, this could be done in multiple ways. First, let's discuss introduction of **fixed effects** to our model.

```{r}
model_fe = lm(n_individuals ~ leaderexperience_continuous + indep, whogov) 
summary(model_fe)
```

We will use `ggeffects` library for visualization of regression with the fixed effects. This is sort of an addition to `ggplot2` library from `tidyverse`. Don't forget to install it using `install.packages()`!

```{r}
#| warning: false

library(ggeffects)
```

Then, visualize the result. What can we see?

```{r}
ggpredict(model_fe, terms= c("leaderexperience_continuous", "indep")) %>%
  plot()
```

Let's customize the plot. It should be relatively straightforward given we know `ggplot` functions. Details for the customization of `plot()` function can be found on [ggeffects](https://strengejacke.github.io/ggeffects/reference/plot.html) website.

```{r}
ggpredict(model_fe, terms= c("leaderexperience_continuous", "indep")) %>%
  plot(show_ci = F) +
  labs(title = "Fixed Effects Regression",
       x = "Tenure of a Leader",
       y = "Number of Individuals in a Cabinet",
       color = "Partisanship") +
  theme_bw()
```

Some common fixed effects include:

-   Country/Region/State

-   Individual leaders/Parties

-   Year/Time

-   Policy presence or absence

By introducing fixed effects, we are able to control for unobserved confounders that vary across the fixed effects (not within!). 


```{r}
whr_subset = whr %>%
  select(Country_name, Ladder_score, Social_support, Perceptions_of_corruption, Continent)

whogov_subset = whogov %>%
  filter(year == 2020) %>%
  select(country_name, n_total, n_minister, n_individuals, system_category, indep)

whr_whogov = whr_subset %>%
  left_join(whogov_subset, by = c("Country_name" = "country_name")) 

whr_whogov = whr_whogov %>%
  mutate(system_category = case_when(system_category == "Parliamentary democracy" ~ "democracy",
                                     system_category == "Presidential democracy" ~ "democracy",
                                     system_category == "Mixed democratic" ~ "democracy",
                                     is.na(system_category) ~ NA,
                                     T ~ "autocracy"))

whr_whogov$system_category = as.factor(whr_whogov$system_category)
```


## Interactions


```{r}
ggplot(whr_whogov, aes(x = n_individuals, y = Ladder_score)) +
  geom_point(aes(color = system_category)) +
  geom_smooth(method = "lm")

model_in = lm(Social_support ~ n_individuals * indep, whr_whogov)
summary(model_in)

ggpredict(model_in, terms= c("n_individuals", "indep")) %>%
  plot(show_ci = F, show_data = T) 

```




Fixed effects, viz



Interactions

polynomials and IV transformations 

# Exercises

relevel

what does it mean? (maybe remove):

```{r}
lm(Ladder_score ~ n_individuals + as.factor(Continent), whr_whogov) %>%
  summary()
```

```{r}
lm(n_individuals ~ leaderexperience_continuous + system_category, whogov) %>%
  ggpredict(terms= c("leaderexperience_continuous", "system_category")) %>%
  plot(show_data = F, show_ci = F)
```



# Check List

<input type="checkbox"/> I know that wrong class of a variable can hinder statistical models and visualizations

<input type="checkbox"/> I know how dummy variables can look like

<input type="checkbox"/> I know how to relevel a categorical variable

<input type="checkbox"/> I know how introduce fixed effects into the model (and I know that I should make it `as.factor()`!)

<input type="checkbox"/> I know how to introduce interaction effects into the model

<input type="checkbox"/> I know how to customize `ggeffects()` plots