[
  {
    "objectID": "ps405-d_1.html",
    "href": "ps405-d_1.html",
    "title": "Last Quarter’s Review",
    "section": "",
    "text": "We are expected to have installed R and RStudio, if not see the installing R section.\nIn the discussion section, we will focus on coding and practicing what we have learned in the lectures.\nOffice hours are on Tuesday, 11-12:30 Scott 110.\nQuestions?\n\n\nDownload script"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PS405 Linear Models",
    "section": "",
    "text": "Week\n\n\nTitle\n\n\nLinks\n\n\n\n\n\n\n1\n\n\nLast Quarter’s Review\n\n\n\n\n\n\n\n2\n\n\nRegression Overview\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ps405-d_1.html#terminology",
    "href": "ps405-d_1.html#terminology",
    "title": "Last Quarter’s Review",
    "section": "Terminology",
    "text": "Terminology"
  },
  {
    "objectID": "ps405-d_1.html#coding-terminology",
    "href": "ps405-d_1.html#coding-terminology",
    "title": "Last Quarter’s Review",
    "section": "Coding Terminology",
    "text": "Coding Terminology\n\nCode Chunk\nTo insert a Code Chunk, you can use Ctrl+Alt+I on Windows and Cmd+Option+I on Mac. Run the whole chunk by clicking the green triangle, or one/multiple lines by using Ctrl + Enter or Command + Return on Mac.\n\nprint(\"Code Chunk\")\n\n[1] \"Code Chunk\"\n\n\n\n\nFunction and Arguments\nMost of the functions we want to run require an argument For example, the function print() above takes the argument “Code Chunk”.\n\nfunction(argument)\n\n\n\nData structures\nThere are many data structures, but the most important to know the following.\n\nObjects. Those are individual units, e.g. a number or a word.\n\n\nnumber = 1\nnumber\n\nword = \"Northwestern\"\nword\n\n[1] 1\n[1] \"Northwestern\"\n\n\n\nVectors. Vectors are collections of objects. To create one, you will need to use function c().\n\n\nnumbers = c(1, 2, 3)\nnumbers\n\n[1] 1 2 3\n\n\n\nDataframes. Dataframes are the most used data structure. Last quarter you spend a lot of time working with it. It is a table with data. Columns are called variables, and those are vectors. You can access a column using $ operator.\n\n\ndf = data.frame(numbers, \n                numbers_multiplied = numbers * 2)\ndf\ndf$numbers_multiplied\n\n  numbers numbers_multiplied\n1       1                  2\n2       2                  4\n3       3                  6\n[1] 2 4 6\n\n\n\n\nData classes\nWe work with various classes of data, and the analysis we perform depends heavily on these classes.\n\nNumeric. Continuous data.\n\n\nnumeric_class = c(1.2, 2.5, 7.3)\nnumeric_class\nclass(numeric_class)\n\n[1] 1.2 2.5 7.3\n[1] \"numeric\"\n\n\n\nInteger. Whole numbers (e.g., count data).\n\n\ninteger_class = c(1:3)\nclass(integer_class)\n\n[1] \"integer\"\n\n\n\nCharacter. Usually, represent textual data.\n\n\nword\n\n[1] \"Northwestern\"\n\nclass(word)\n\n[1] \"character\"\n\n\n\nFactor. Categorical variables, where each value is treated as an identifier for a category.\n\n\ncolors = c(\"blue\", \"green\")\nclass(colors)\n\n[1] \"character\"\n\n\nAs you noticed, R did not identify the class of data correctly. We can change it using as.factor() function. You can easily change the class of your variable (as.numeric(), as.integer(), as.character())\n\ncolors = as.factor(colors)\nclass(colors)\n\n[1] \"factor\"\n\n\n\n\nLibraries\nQuite frequently, we use additional libraries to extend the capabilities of R. I’m sure you remember tidyverse. Let’s load it.\n\nlibrary(tidyverse)\n\nIf you updated your R or recently downloaded it, you can easily install libraries using the function install.packages().\n\n\nPipes\nPipes (%&gt;% or |&gt;) are helpful for streamlining the coding. They introduce linearity to the process of writing the code. In plain English, a pipe translates to “take an object, and then”.\n\nnumbers %&gt;%\n  print()\n\n[1] 1 2 3"
  },
  {
    "objectID": "ps405-d_2.html",
    "href": "ps405-d_2.html",
    "title": "Regression Overview",
    "section": "",
    "text": "Review of the Previous Session\nLet’s refresh what we did last week.\n\n\n\n\n\n\nExercise\n\n\n\nFirst, load the tidyverse library\n\nlibrary(tidyverse)\n\nThen, load the V-Dem data\n\nload(url(\"https://github.com/vdeminstitute/vdemdata/raw/6bee8e170578fe8ccdc1414ae239c5e870996bc0/data/vdem.RData\"))\n\nYou are interested in corruption in various geographical regions. Select year (year), region (e_regionpol_7C) and corruption (v2x_corr) variables from the vdem dataset.\n\ncorruption_data = ... %&gt;%\n  ...(year, ..., v2x_corr) \n\nAs we are working with the V-Dem data, let’s rename variables so it’s more straightforward.\n\ncorruption_data = corruption_data ...\n  ...(region = e_regionpol_7C,\n      corruption = ...)\n\nCalculate the average of the corruption variable. Don’t forget about the na.rm = TURE argument!\n\n...\n\nUsing group_by() and summarize() calculate the average corruption for all regions in the dataset.\n\ncorruption_data ...\n  (...) %&gt;%\n  ...(average = ...(..., na.rm = T))\n\nLastly, let’s see the distributions of corruption across regions. Draw a boxplot below with region variable on the X axis, and corruption variable on the Y axis.\n\nggplot(data = corruption_data) +\n  ...(aes(x = ..., y = ...))\n\nSomething is wrong, right? We haven’t checked the classes of the variables, and apparently the region variable has to be changed. Let’s check it’s class first.\n\n...(corruption_data$...)\n\nWhat class should it be? Let’s recode it directly on the plot.\n\n...(...) +\n  geom_boxplot(aes(x = ...(region), y = ...))\n\n\n\n\n\nAgenda for Today\n\nClearing the environment\nLoading CSV data to R\nBuilding a simple OLS regression\nInterpreting the regression\n\n\nDownload script\n\n\n\nDownload data\n\n\n\nSimple Linear Regression\nFirst of all, don’t forget to download the data! Today we are working with the World Happiness Report. For loading the dataset in R, getwd() and setwd() can be helpful. The codebook is here to help us.\n\nCountry_name is the name of the country\nLadder_score is the happiness score\nLogged_GDP_per_capita is the log of GDP per capita\nSocial_support is an index that measures the extent to which an individual has someone to rely on in times of trouble.\nHealthy_life_expectancy is the expected age of healthy living.\n\nAnd many others.\n\nwhr = read.csv(\"data/WHR.csv\")\n\nExplore what we have in the dataset by accessing the column names\n\ncolnames(whr)\n\n [1] \"Country_name\"                             \n [2] \"Ladder_score\"                             \n [3] \"Standard_error_of_ladder_score\"           \n [4] \"upperwhisker\"                             \n [5] \"lowerwhisker\"                             \n [6] \"Logged_GDP_per_capita\"                    \n [7] \"Social_support\"                           \n [8] \"Healthy_life_expectancy\"                  \n [9] \"Freedom_to_make_life_choices\"             \n[10] \"Generosity\"                               \n[11] \"Perceptions_of_corruption\"                \n[12] \"Ladder_score_in_Dystopia\"                 \n[13] \"Explained_by_Log_GDP_per_capita\"          \n[14] \"Explained_by_Social_support\"              \n[15] \"Explained_by_Healthy_life_expectancy\"     \n[16] \"Explained_by_Freedom_to_make_life_choices\"\n[17] \"Explained_by_Generosity\"                  \n[18] \"Explained_by_Perceptions_of_corruption\"   \n[19] \"Dystopia_residual\"                        \n[20] \"Continent\"                                \n\n\nFirst, let’s draw a histogram for Ladder_score variable.\n\nggplot(whr) +\n  geom_histogram(aes(x = Ladder_score)) +\n  labs(x = \"Happiness Score\") +\n  scale_y_continuous(breaks = c(0:10)) +\n  theme_classic()\n\n\n\n\n\n\n\n\nNow, let’s plot happiness scores (Ladder_score) against Social_support. What can we see?\n\nggplot(whr) +\n  geom_point(aes(x = Social_support, y = Ladder_score))\n\n\n\n\n\n\n\n\nLet’s load the estimatr library for the lm_robust() function, and then run the model.\n\nlibrary(estimatr)\nbasic_model = lm_robust(Ladder_score ~ Social_support, whr)\n  \nsummary(basic_model)\n\n\nCall:\nlm_robust(formula = Ladder_score ~ Social_support, data = whr)\n\nStandard error type:  HC2 \n\nCoefficients:\n               Estimate Std. Error t value  Pr(&gt;|t|) CI Lower CI Upper  DF\n(Intercept)     -0.3428     0.3928 -0.8727 3.844e-01   -1.120    0.434 135\nSocial_support   7.3618     0.4729 15.5690 6.228e-32    6.427    8.297 135\n\nMultiple R-squared:  0.6964 ,   Adjusted R-squared:  0.6942 \nF-statistic: 242.4 on 1 and 135 DF,  p-value: &lt; 2.2e-16\n\n\nA one unit increase in Social Support is associated with a 7.4 increase in the happiness score. What is the maximum value the Happiness Score can take?\n\nmax(whr$Ladder_score)\n\n[1] 7.804\n\n\nSo, how much does this model tell us?\nLet’s correct the Social_support variable a bit, transforming it to 0-100 scale. What do you think about the model now? What do you think about \\(R^2\\)?\n\nwhr = whr %&gt;%\n  mutate(Social_support_percentage = Social_support * 100)\n\nadjusted_model = lm_robust(Ladder_score ~ Social_support_percentage, whr)\n  \nsummary(adjusted_model)\n\n\nCall:\nlm_robust(formula = Ladder_score ~ Social_support_percentage, \n    data = whr)\n\nStandard error type:  HC2 \n\nCoefficients:\n                          Estimate Std. Error t value  Pr(&gt;|t|) CI Lower\n(Intercept)               -0.34281   0.392796 -0.8727 3.844e-01 -1.11964\nSocial_support_percentage  0.07362   0.004729 15.5690 6.228e-32  0.06427\n                          CI Upper  DF\n(Intercept)                0.43402 135\nSocial_support_percentage  0.08297 135\n\nMultiple R-squared:  0.6964 ,   Adjusted R-squared:  0.6942 \nF-statistic: 242.4 on 1 and 135 DF,  p-value: &lt; 2.2e-16\n\n\nLet’s write this regression formula out. Do you remember the general form?\n\\[\nY = \\beta_0 + \\beta_1x_1+\\epsilon\n\\] In our case, this can be presented as\n\\[\n\\text{Happines} = -0.34 + 0.07\\text{ Social Support} + e \\\\\nY = -0.34+0.07X+u\n\\]\nNow, visualize the regression.\n\nggplot(whr, aes(x = Social_support_percentage, y = Ladder_score)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Social Support (%)\",\n       y = \"Happiness Score\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nHealthy lifestyle for mutation exercise\ninterpretation\nBias-Variance Tradeoff\nset.seed for sampling\nR^2\nElection turnout (A) (v2eltrnout) Legislative constraints on the executive index (D) (v2xlg_legcon)\nAre the capacities of the legislature associated with electoral turnout? Is there an association between legislative constraints on the executive and electoral turnout?\n\nlegislative_data = vdem %&gt;% \n  select(country_name, year, v2xlg_legcon, v2eltrnout, e_v2x_polyarchy_5C) %&gt;%\n  rename(legislative_constraints = v2xlg_legcon,\n         turnout = v2eltrnout,\n         regime = e_v2x_polyarchy_5C) %&gt;%\n  filter(year &gt; 2020 & regime &gt;= 0.5) \n\nlegislative_data %&gt;%\n  ggplot(aes(x = legislative_constraints, y = turnout)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\nlm(turnout ~ legislative_constraints, legislative_data) %&gt;%\n  summary()\n\nlibrary(estimatr)\n\n\n\nCheck List\n I know that wrong class of a variable can hinder statistical models and vizualizaitons"
  }
]