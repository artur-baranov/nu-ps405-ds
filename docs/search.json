[
  {
    "objectID": "ps405-d_1.html",
    "href": "ps405-d_1.html",
    "title": "Last Quarter’s Review",
    "section": "",
    "text": "We are expected to have installed R and RStudio, if not see the installing R section.\nIn the discussion section, we will focus on coding and practicing what we have learned in the lectures.\nOffice hours are on Tuesday, 11-12:30 Scott 110.\nQuestions?\n\n\nDownload script"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PS405 Linear Models",
    "section": "",
    "text": "Week\n\n\nTitle\n\n\nLinks\n\n\n\n\n\n\n1\n\n\nLast Quarter’s Review\n\n\n\n\n\n\n\n2\n\n\nRegression Overview\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "ps405-d_1.html#terminology",
    "href": "ps405-d_1.html#terminology",
    "title": "Last Quarter’s Review",
    "section": "Terminology",
    "text": "Terminology"
  },
  {
    "objectID": "ps405-d_1.html#coding-terminology",
    "href": "ps405-d_1.html#coding-terminology",
    "title": "Last Quarter’s Review",
    "section": "Coding Terminology",
    "text": "Coding Terminology\n\nCode Chunk\nTo insert a Code Chunk, you can use Ctrl+Alt+I on Windows and Cmd+Option+I on Mac. Run the whole chunk by clicking the green triangle, or one/multiple lines by using Ctrl + Enter or Command + Return on Mac.\n\nprint(\"Code Chunk\")\n\n[1] \"Code Chunk\"\n\n\n\n\nFunction and Arguments\nMost of the functions we want to run require an argument For example, the function print() above takes the argument “Code Chunk”.\n\nfunction(argument)\n\n\n\nData structures\nThere are many data structures, but the most important to know the following.\n\nObjects. Those are individual units, e.g. a number or a word.\n\n\nnumber = 1\nnumber\n\nword = \"Northwestern\"\nword\n\n[1] 1\n[1] \"Northwestern\"\n\n\n\nVectors. Vectors are collections of objects. To create one, you will need to use function c().\n\n\nnumbers = c(1, 2, 3)\nnumbers\n\n[1] 1 2 3\n\n\n\nDataframes. Dataframes are the most used data structure. Last quarter you spend a lot of time working with it. It is a table with data. Columns are called variables, and those are vectors. You can access a column using $ operator.\n\n\ndf = data.frame(numbers, \n                numbers_multiplied = numbers * 2)\ndf\ndf$numbers_multiplied\n\n  numbers numbers_multiplied\n1       1                  2\n2       2                  4\n3       3                  6\n[1] 2 4 6\n\n\n\n\nData classes\nWe work with various classes of data, and the analysis we perform depends heavily on these classes.\n\nNumeric. Continuous data.\n\n\nnumeric_class = c(1.2, 2.5, 7.3)\nnumeric_class\nclass(numeric_class)\n\n[1] 1.2 2.5 7.3\n[1] \"numeric\"\n\n\n\nInteger. Whole numbers (e.g., count data).\n\n\ninteger_class = c(1:3)\nclass(integer_class)\n\n[1] \"integer\"\n\n\n\nCharacter. Usually, represent textual data.\n\n\nword\n\n[1] \"Northwestern\"\n\nclass(word)\n\n[1] \"character\"\n\n\n\nFactor. Categorical variables, where each value is treated as an identifier for a category.\n\n\ncolors = c(\"blue\", \"green\")\nclass(colors)\n\n[1] \"character\"\n\n\nAs you noticed, R did not identify the class of data correctly. We can change it using as.factor() function. You can easily change the class of your variable (as.numeric(), as.integer(), as.character())\n\ncolors = as.factor(colors)\nclass(colors)\n\n[1] \"factor\"\n\n\n\n\nLibraries\nQuite frequently, we use additional libraries to extend the capabilities of R. I’m sure you remember tidyverse. Let’s load it.\n\nlibrary(tidyverse)\n\nIf you updated your R or recently downloaded it, you can easily install libraries using the function install.packages().\n\n\nPipes\nPipes (%&gt;% or |&gt;) are helpful for streamlining the coding. They introduce linearity to the process of writing the code. In plain English, a pipe translates to “take an object, and then”.\n\nnumbers %&gt;%\n  print()\n\n[1] 1 2 3"
  },
  {
    "objectID": "ps405-d_2.html",
    "href": "ps405-d_2.html",
    "title": "Regression Overview",
    "section": "",
    "text": "Review of the Previous Session\nLet’s refresh what we did last week.\n\n\n\n\n\n\nExercise\n\n\n\nFirst, load the V-Dem data\n\nlibrary(tidyverse)\nload(url(\"https://github.com/vdeminstitute/vdemdata/raw/6bee8e170578fe8ccdc1414ae239c5e870996bc0/data/vdem.RData\"))\n\nYou are interested in corruption in various geographical regions. Select year (year), region (e_regionpol_7C) and corruption (v2x_corr) variables from the vdem dataset.\n\ncorruption_data = ... %&gt;%\n  ...(year, ..., v2x_corr) \n\nAs we are working with the V-Dem data, let’s rename variables so it’s more straightforward.\n\ncorruption_data = corruption_data ...\n  ...(region = e_regionpol_7C,\n      corruption = ...)\n\nCalculate the average of the corruption variable. Don’t forget about the na.rm = TURE argument!\n\n...\n\nUsing group_by() and summarize() calculate the average corruption for all regions in the dataset.\n\ncorruption_data ...\n  (...) %&gt;%\n  ...(average = ...(..., na.rm = T))\n\nLastly, let’s see the distributions of corruption across regions. Draw a boxplot below with region variable on the X axis, and corruption variable on the Y axis.\n\nggplot(data = corruption_data) +\n  ...(aes(x = ..., y = ...))\n\nSomething is wrong, right? We haven’t checked the classes of the variables, and apparently the region variable has to be changed. Let’s check it’s class first.\n\n...(corruption_data$...)\n\nWhat class should it be? Let’s recode it directly on the plot.\n\n...(...) +\n  geom_boxplot(aes(x = ...(region), y = ...))\n\n\n\n\n\nAgenda for Today\n\nDownload script\n\n\n\nNonparametric regressions\nIn this part, we continue working with the corruption across the globe. However, we will use another type of the variable for the corruption. First, we extract all the data we need from the V-Dem dataset. Those include country_name, year, Political corruption index (e_v2x_corr_5C) and GDP per capita (e_gdppc) variables.\n\ncorruption_gdp = vdem %&gt;%\n  select(country_name, year, e_v2x_corr_5C, e_gdppc) %&gt;%\n  rename(corruption = e_v2x_corr_5C,\n         gdp_percap = e_gdppc) %&gt;%\n  filter(year &gt;= 2000)\n\nExplore the variable corruption below. What do you notice?\n\nggplot(corruption_gdp) +\n  geom_histogram(aes(x = corruption))\n\n\n\n\n\n\n\n\nLet’s check which values this variable takes. And we want to know it’s class too.\n\ntable(corruption_gdp$corruption)\n\n\n   0 0.25  0.5 0.75    1 \n1038  520  773  990  951 \n\nclass(corruption_gdp$corruption)\n\n[1] \"numeric\"\n\n\nApparently, those are categories. Thus, we need to treat them as factors instead of numeric.\n\ncorruption_gdp$corruption = as.factor(corruption_gdp$corruption)\n\nGreat! Now, let’s reproduce the logic behind the Simple Local Averages regression. Visualize GDP per capita distribution across corruption index groups.\n\nggplot(corruption_gdp,\n       aes(x = corruption,\n           y = gdp_percap)) +\n  geom_point() +\n  labs(x = \"Corruption Index (Categorical)\",\n       y = \"GDP Per Capita\")\n\n\n\n\n\n\n\n\nNow, we should add a local average, i.e. an average in each group. Take a moment to understand the code.\n\nggplot(corruption_gdp,\n       aes(x = corruption,\n           y = gdp_percap)) +\n  geom_point() +\n  stat_summary(fun = mean, \n               color = \"red\") +\n  labs(x = \"Corruption Index (Categorical)\",\n       y = \"GDP Per Capita\")\n\n\n\n\n\n\n\n\n\n\nParametric Regression\nRegression\ninterpretation\nA one percentage point increase in rate of College Educated voters is associated with a .33 percentage point decrease in the average 2016-2020 change in Republican vote share.\nBias-Variance Tradeoff\nElection turnout (A) (v2eltrnout) Legislative constraints on the executive index (D) (v2xlg_legcon)\nAre the capacities of the legislature associated with electoral turnout? Is there an association between legislative constraints on the executive and electoral turnout?\n\nlegislative_data = vdem %&gt;% \n  select(country_name, year, v2xlg_legcon, v2eltrnout, e_v2x_polyarchy_5C) %&gt;%\n  rename(legislative_constraints = v2xlg_legcon,\n         turnout = v2eltrnout,\n         regime = e_v2x_polyarchy_5C) %&gt;%\n  filter(year &gt; 2020 & regime &gt;= 0.5) \n\nlegislative_data %&gt;%\n  ggplot(aes(x = legislative_constraints, y = turnout)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 230 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 230 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nlm(turnout ~ legislative_constraints, legislative_data) %&gt;%\n  summary()\n\n\nCall:\nlm(formula = turnout ~ legislative_constraints, data = legislative_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-47.950  -8.899   0.595  10.013  34.806 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               44.772      7.212   6.208 1.67e-08 ***\nlegislative_constraints   25.222      9.106   2.770  0.00682 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.46 on 89 degrees of freedom\n  (230 пропущенных наблюдений удалены)\nMultiple R-squared:  0.07937,   Adjusted R-squared:  0.06902 \nF-statistic: 7.673 on 1 and 89 DF,  p-value: 0.006823\n\nlibrary(estimatr)\n\n\n\nCheck List\n I know that wrong class of a variable can hinder statistical models and vizualizaitons"
  }
]